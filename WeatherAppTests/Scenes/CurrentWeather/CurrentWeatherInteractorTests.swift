//
//  CurrentWeatherInteractorTests.swift
//  WeatherApp
//
//  Created by Cesar Brenes on 13/4/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import WeatherApp
import XCTest

class CurrentWeatherInteractorTests: XCTestCase {
    // MARK: Subject under test

    var sut: CurrentWeatherInteractor!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupCurrentWeatherInteractor()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupCurrentWeatherInteractor() {
        sut = CurrentWeatherInteractor()
        sut.apiWorker = APIWorker(store: MockWeatherAPIService())
        sut.locationWorker = LocationWorker(store: MockCoreLocationService())
    }

    // MARK: Test doubles

    class CurrentWeatherPresentationLogicSpy: CurrentWeatherPresentationLogic {
        var presentUIInformationCalled = false
        var response: CurrentWeather.UIInformation.Response?

        func presentUIInformation(response: CurrentWeather.UIInformation.Response) {
            presentUIInformationCalled = true
            self.response = response
        }
    }

    // MARK: Tests

    func testRequestUIInformationSuccess() {
        // Given
        let spy = CurrentWeatherPresentationLogicSpy()
        sut.presenter = spy
        let request = CurrentWeather.UIInformation.Request(needsANewLocationWorkerInstance: false)

        // When
        sut.requestUIInformation(request: request)

        // Then
        XCTAssertTrue(spy.presentUIInformationCalled, "UIInformation(request:) should ask the presenter to format the result")
    }

    func testRequestUIInformationShouldReturnError() {

        // Given
        let spy = CurrentWeatherPresentationLogicSpy()
        sut.presenter = spy
        let request = CurrentWeather.UIInformation.Request(needsANewLocationWorkerInstance: false)
        sut.locationWorker = LocationWorker(store: MockCoreLocationService(error: .invalidLocationPermissions))

        // When
        sut.requestUIInformation(request: request)

        switch spy.response!.result {
        case .failure(let error):
            XCTAssertEqual(error, .invalidLocationPermissions)
        case .success:
            XCTAssert(false, "It should be an error")
        }
    }
}
