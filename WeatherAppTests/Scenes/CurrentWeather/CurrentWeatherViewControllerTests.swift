//
//  CurrentWeatherViewControllerTests.swift
//  WeatherApp
//
//  Created by Cesar Brenes on 13/4/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import WeatherApp
import XCTest
import SDWebImageMockPlugin

class CurrentWeatherViewControllerTests: XCTestCase {
    // MARK: Subject under test

    var sut: CurrentWeatherViewController!
    var window: UIWindow!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupCurrentWeatherViewController()
    }

    override func tearDown() {
        window = nil
        super.tearDown()
    }

    // MARK: Test setup

    func setupCurrentWeatherViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "CurrentWeatherViewController") as? CurrentWeatherViewController
    }

    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }

    // MARK: Test doubles

    class CurrentWeatherBusinessLogicSpy: CurrentWeatherBusinessLogic {

        var requestUIInformationCalled = false

        func requestUIInformation(request: CurrentWeather.UIInformation.Request) {
            requestUIInformationCalled = true
        }
    }

    // MARK: Tests

    func testRequestUIInformationWhenViewIsLoaded() {
        // Given
        let spy = CurrentWeatherBusinessLogicSpy()
        sut.interactor = spy

        // When
        loadView()

        // Then
        XCTAssertTrue(spy.requestUIInformationCalled, "viewDidLoad() should ask the interactor to requestUIInformation")
    }

    func testRequestUIInformationWhenRetryButtonIsPressed() {
        // Given
        let spy = CurrentWeatherBusinessLogicSpy()
        sut.interactor = spy

        // When
        sut.retryButtonAction(UIView())

        // Then
        XCTAssertTrue(spy.requestUIInformationCalled, "retryAction should ask the interactor to requestUIInformation")
    }

    func testDisplayInformationSuccess() {
        // Given
        let viewModel = CurrentWeather.UIInformation.ViewModel.Success(name: "name", iconURL: URL(string: "www.google.com"), temperature: "temperature", description: "description", lowAndMaxTemperature: "lowAndMaxTemperature", wind: "wind", isErrorViewHidden: true, isWeatherInformationViewHidden: false)
        let imageMocker = ImageCacheMocker() // this is necessary to mock the process of download an image
        imageMocker.setupSDWebImageMocking()

        // When
        loadView()
        sut.displayUIInformation(viewModel: viewModel)

        // Then
        XCTAssertEqual(viewModel.name, sut.cityNameLabel.text)
        XCTAssertEqual(viewModel.isWeatherInformationViewHidden, sut.weatherInfoContainerStackView.isHidden)
        XCTAssertEqual(viewModel.isErrorViewHidden, sut.errorInfoContainerStackView.isHidden)
        XCTAssertEqual(viewModel.temperature, sut.currentTemperatureLabel.text)
        XCTAssertEqual(viewModel.description, sut.descriptionLabel.text)
        XCTAssertEqual(viewModel.lowAndMaxTemperature, sut.minAndMaxTemperatureLabel.text)
        XCTAssertEqual(viewModel.wind, sut.windLabel.text)
        XCTAssertNotNil(sut.weatherImageView.image)
        XCTAssert(sut.activityIndicator.isHidden)
    }

    func testDisplayInformationErrorFound() {
        // Given
        let viewModel = CurrentWeather.UIInformation.ViewModel.ErrorFound(title: "title", message: "message", isErrorViewHidden: false, isWeatherInformationViewHidden: true)
        // When
        loadView()
        sut.displayErrorFound(viewModel: viewModel)

        // Then
        XCTAssertEqual(viewModel.isWeatherInformationViewHidden, sut.weatherInfoContainerStackView.isHidden)
        XCTAssertEqual(viewModel.isErrorViewHidden, sut.errorInfoContainerStackView.isHidden)
        XCTAssertEqual(viewModel.title, sut.errorTitleLabel.text)
        XCTAssertEqual(viewModel.message, sut.errorDescriptionLabel.text)
        XCTAssert(sut.activityIndicator.isHidden)
    }
}
