//
//  CurrentWeatherPresenterTests.swift
//  WeatherApp
//
//  Created by Cesar Brenes on 13/4/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import WeatherApp
import XCTest

class CurrentWeatherPresenterTests: XCTestCase {
    // MARK: Subject under test

    var sut: CurrentWeatherPresenter!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupCurrentWeatherPresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupCurrentWeatherPresenter() {
        sut = CurrentWeatherPresenter()
    }

    // MARK: Test doubles

    class CurrentWeatherDisplayLogicSpy: CurrentWeatherDisplayLogic {
        var displayUIInformationCalled = false
        var displayErrorFoundCalled = false
        var viewModelUIInformation: CurrentWeather.UIInformation.ViewModel.Success?
        var viewModelErrorFound: CurrentWeather.UIInformation.ViewModel.ErrorFound?

        func displayUIInformation(viewModel: CurrentWeather.UIInformation.ViewModel.Success) {
            displayUIInformationCalled = true
            viewModelUIInformation = viewModel
        }

        func displayErrorFound(viewModel: CurrentWeather.UIInformation.ViewModel.ErrorFound) {
            displayErrorFoundCalled = true
            viewModelErrorFound = viewModel
        }
    }

    // MARK: Tests

    func testPresentUIInformationSuccess() {
        // Given
        let spy = CurrentWeatherDisplayLogicSpy()
        sut.viewController = spy
        let weather = Weather(name: "name", iconURL: URL(string: "www.google.com"), temperature: 100, description: "description", lowTemperature: 200, hightTemperature: 300, windSpeed: 400, windDirection: 500)
        let response = CurrentWeather.UIInformation.Response(result: .success(weather))

        // When
        sut.presentUIInformation(response: response)

        // Then
        XCTAssert(spy.displayUIInformationCalled, "presentUIInformation(response:) should ask the view controller to display the result")
        XCTAssertFalse(spy.displayErrorFoundCalled)
        XCTAssertEqual(spy.viewModelUIInformation?.name, weather.name)
        XCTAssertEqual(spy.viewModelUIInformation?.iconURL, weather.iconURL)
        XCTAssertEqual(spy.viewModelUIInformation?.temperature, "\(weather.temperature)°")
        XCTAssertEqual(spy.viewModelUIInformation?.description, weather.description)
        XCTAssertEqual(spy.viewModelUIInformation?.lowAndMaxTemperature, "Low: \(weather.lowTemperature)°  Hight: \(weather.hightTemperature)°")
        XCTAssertEqual(spy.viewModelUIInformation?.wind, "Wind: \(weather.windSpeed) (\(weather.windDirection))")
        XCTAssertTrue(spy.viewModelUIInformation?.isErrorViewHidden ?? false)
        XCTAssertFalse(spy.viewModelUIInformation?.isWeatherInformationViewHidden ?? true)
    }

    func testPresentUIInformationErrorFoundLocationPermissions() {
        // Given
        let spy = CurrentWeatherDisplayLogicSpy()
        sut.viewController = spy
        let response = CurrentWeather.UIInformation.Response(result: .failure(.invalidLocationPermissions))

        // When
        sut.presentUIInformation(response: response)

        // Then
        XCTAssertFalse(spy.displayUIInformationCalled)
        XCTAssert(spy.displayErrorFoundCalled)
        XCTAssertEqual(spy.viewModelErrorFound?.title, "Location Permissions")
        XCTAssertEqual(spy.viewModelErrorFound?.message, "Please give the necessary permissions to be able to use the app, Go to Settings -> Privacy -> Location Services -> WeatherApp -> Select Always")
    }

    func testPresentUIInformationErrorFoundInvalidURLAPIRequest() {
        // Given
        let spy = CurrentWeatherDisplayLogicSpy()
        sut.viewController = spy
        let response = CurrentWeather.UIInformation.Response(result: .failure(.invalidURLAPIRequest))

        // When
        sut.presentUIInformation(response: response)

        // Then
        XCTAssertFalse(spy.displayUIInformationCalled)
        XCTAssert(spy.displayErrorFoundCalled)
        XCTAssertEqual(spy.viewModelErrorFound?.title, "Server Error")
        XCTAssertEqual(spy.viewModelErrorFound?.message, "We are having issues with our server, please try later")
    }

    func testPresentUIInformationErrorFoundInvalidServerResponse() {
        // Given
        let spy = CurrentWeatherDisplayLogicSpy()
        sut.viewController = spy
        let response = CurrentWeather.UIInformation.Response(result: .failure(.invalidServerResponse))

        // When
        sut.presentUIInformation(response: response)

        // Then
        XCTAssertFalse(spy.displayUIInformationCalled)
        XCTAssert(spy.displayErrorFoundCalled)
        XCTAssertEqual(spy.viewModelErrorFound?.title, "Server Error")
        XCTAssertEqual(spy.viewModelErrorFound?.message, "We are having issues with our server, please try later")
    }

    func testPresentUIInformationErrorFoundServerError() {
        // Given
        let spy = CurrentWeatherDisplayLogicSpy()
        sut.viewController = spy
        let response = CurrentWeather.UIInformation.Response(result: .failure(.serverError))

        // When
        sut.presentUIInformation(response: response)

        // Then
        XCTAssertFalse(spy.displayUIInformationCalled)
        XCTAssert(spy.displayErrorFoundCalled)
        XCTAssertEqual(spy.viewModelErrorFound?.title, "Server Error")
        XCTAssertEqual(spy.viewModelErrorFound?.message, "We are having issues with our server, please try later")
    }

    func testPresentUIInformationErrorFoundNoInternetConnection() {
        // Given
        let spy = CurrentWeatherDisplayLogicSpy()
        sut.viewController = spy
        let response = CurrentWeather.UIInformation.Response(result: .failure(.noInternetConnection))

        // When
        sut.presentUIInformation(response: response)

        // Then
        XCTAssertFalse(spy.displayUIInformationCalled)
        XCTAssert(spy.displayErrorFoundCalled)
        XCTAssertEqual(spy.viewModelErrorFound?.title, "No Internet Connection")
        XCTAssertEqual(spy.viewModelErrorFound?.message, "It looks the device doesn't have internet connection, please check it and try again")
    }
}
