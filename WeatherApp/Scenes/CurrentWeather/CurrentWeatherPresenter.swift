//
//  CurrentWeatherPresenter.swift
//  WeatherApp
//
//  Created by Cesar Brenes on 12/4/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CurrentWeatherPresentationLogic {
    func presentUIInformation(response: CurrentWeather.UIInformation.Response)
}

class CurrentWeatherPresenter: CurrentWeatherPresentationLogic {
    weak var viewController: CurrentWeatherDisplayLogic?
    
    func presentUIInformation(response: CurrentWeather.UIInformation.Response) {
        switch response.result {
        case .success(let weather):
            createUIInformationResponse(weather: weather)
        case .failure(let error):
            createErrorInformationResponse(error: error)
        }
    }
    
    func createUIInformationResponse(weather: Weather) {
        let lowAndMaxTemperature = "Low: \(weather.lowTemperature)°  Hight: \(weather.hightTemperature)°"
        let wind = "Wind: \(weather.windSpeed) (\(weather.windDirection))"
        let viewModel = CurrentWeather.UIInformation.ViewModel.Success(name: weather.name, iconURL: weather.iconURL, temperature: "\(weather.temperature)°", description: weather.description ?? "", lowAndMaxTemperature: lowAndMaxTemperature, wind: wind, isErrorViewHidden: true, isWeatherInformationViewHidden: false)
        viewController?.displayUIInformation(viewModel: viewModel)
    }
    
    func createErrorInformationResponse(error: WeatherAppError) {
        var title = ""
        var message = ""
        switch error {
        case .invalidLocationPermissions:
            title = "Location Permissions"
            message = "Please give the necessary permissions to be able to use the app, Go to Settings -> Privacy -> Location Services -> WeatherApp -> Select Always"
        case .invalidURLAPIRequest, .invalidServerResponse, .serverError:
            title = "Server Error"
            message = "We are having issues with our server, please try later"
        case .noInternetConnection:
            title = "No Internet Connection"
            message = "It looks the device doesn't have internet connection, please check it and try again"
        }
        let viewModel = CurrentWeather.UIInformation.ViewModel.ErrorFound(title: title, message: message, isErrorViewHidden: false, isWeatherInformationViewHidden: true)
        viewController?.displayErrorFound(viewModel: viewModel)
    }
}
