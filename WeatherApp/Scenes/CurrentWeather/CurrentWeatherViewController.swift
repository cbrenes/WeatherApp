//
//  CurrentWeatherViewController.swift
//  WeatherApp
//
//  Created by Cesar Brenes on 12/4/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SDWebImage

protocol CurrentWeatherDisplayLogic: AnyObject {
    func displayUIInformation(viewModel: CurrentWeather.UIInformation.ViewModel.Success)
    func displayErrorFound(viewModel: CurrentWeather.UIInformation.ViewModel.ErrorFound)
}

class CurrentWeatherViewController: UIViewController, CurrentWeatherDisplayLogic {
    var interactor: CurrentWeatherBusinessLogic?
    var router: (NSObjectProtocol & CurrentWeatherRoutingLogic & CurrentWeatherDataPassing)?
    
    // MARK: Object lifecycle
    @IBOutlet weak var weatherInfoContainerStackView: UIStackView!
    @IBOutlet weak var errorInfoContainerStackView: UIStackView!
    @IBOutlet weak var cityNameLabel: UILabel!
    @IBOutlet weak var weatherImageView: UIImageView!
    @IBOutlet weak var currentTemperatureLabel: UILabel!
    @IBOutlet weak var descriptionLabel: UILabel!
    @IBOutlet weak var minAndMaxTemperatureLabel: UILabel!
    @IBOutlet weak var windLabel: UILabel!
    @IBOutlet weak var errorTitleLabel: UILabel!
    @IBOutlet weak var errorDescriptionLabel: UILabel!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CurrentWeatherInteractor()
        let presenter = CurrentWeatherPresenter()
        let router = CurrentWeatherRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    let apiManager = APIWorker(store: OpenWeatherAPIService())
    override func viewDidLoad() {
        super.viewDidLoad()
        activityIndicator.transform = CGAffineTransform(scaleX: 5, y: 5)
        requestUIInformation()
    }
    
    func requestUIInformation() {
        activityIndicator?.startAnimating()
        let request = CurrentWeather.UIInformation.Request(needsANewLocationWorkerInstance: true)
        interactor?.requestUIInformation(request: request)
    }
    
    func displayUIInformation(viewModel: CurrentWeather.UIInformation.ViewModel.Success) {
        DispatchQueueHelper.executeInMainThread {
            self.weatherInfoContainerStackView.isHidden = viewModel.isWeatherInformationViewHidden
            self.errorInfoContainerStackView.isHidden = viewModel.isErrorViewHidden
            self.cityNameLabel.text = viewModel.name
            self.weatherImageView.sd_setImage(with: viewModel.iconURL)
            self.currentTemperatureLabel.text = viewModel.temperature
            self.descriptionLabel.text = viewModel.description
            self.minAndMaxTemperatureLabel.text = viewModel.lowAndMaxTemperature
            self.windLabel.text = viewModel.wind
            self.activityIndicator.stopAnimating()
        }
    }
    
    func displayErrorFound(viewModel: CurrentWeather.UIInformation.ViewModel.ErrorFound) {
        DispatchQueueHelper.executeInMainThread {
            self.weatherInfoContainerStackView.isHidden = viewModel.isWeatherInformationViewHidden
            self.errorInfoContainerStackView.isHidden = viewModel.isErrorViewHidden
            self.errorTitleLabel.text = viewModel.title
            self.errorDescriptionLabel.text = viewModel.message
            self.activityIndicator.stopAnimating()
        }
    }
    
    @IBAction func retryButtonAction(_ sender: Any) {
        requestUIInformation()
    }
}
