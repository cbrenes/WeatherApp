//
//  CurrentWeatherInteractor.swift
//  WeatherApp
//
//  Created by Cesar Brenes on 12/4/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CurrentWeatherBusinessLogic {
    func requestUIInformation(request: CurrentWeather.UIInformation.Request)
}

protocol CurrentWeatherDataStore {
}

class CurrentWeatherInteractor: CurrentWeatherBusinessLogic, CurrentWeatherDataStore {
    var presenter: CurrentWeatherPresentationLogic?
    
    var apiWorker: APIWorker
    var locationWorker: LocationWorker?
    
    init() {
        apiWorker = APIWorker(store: OpenWeatherAPIService())
    }
    
    func requestUIInformation(request: CurrentWeather.UIInformation.Request) {
        if request.needsANewLocationWorkerInstance { // this creates a new instance every time a request is done and this property is true, with a clear state in the location worker the app doesn't care about the changes the user can do in privacy
            locationWorker = LocationWorker(store: CoreLocationService())
        }
        locationWorker?.getCurrentLocation { [weak self] locationResult in
            switch locationResult {
            case .success(let coordinates):
                self?.apiWorker.fetchWeatherForCurrentLocation(coordinates: coordinates, completion: { apiResult in
                    self?.presenter?.presentUIInformation(response: CurrentWeather.UIInformation.Response(result: apiResult))
                })
            case .failure(let error):
                self?.presenter?.presentUIInformation(response: CurrentWeather.UIInformation.Response(result: .failure(error)))
            }
        }
    }
}
